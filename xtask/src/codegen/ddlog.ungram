Root = Item

Item = FuncDef | RelationDef

RelationDef = modifiers:RelMods keyword:RelKw name:RelName columns:RelCols
RelMods = (Input | Output | Extern)*
RelKw = Relation | Multiset | Stream
Relation = 'relation'
Multiset = 'multiset'
Stream = 'stream'
RelName = 'ident'
RelCols = '(' RelCol* ')'
RelCol = binding:Pat ':' ty:Type ','?

FuncDef = modifiers:FuncMods keyword:'function' name:FuncName args:FuncArgs (':' return_ty:Type)? body:Block
FuncMods = (Input | Output | Extern)*
FuncName = 'ident'
FuncArgs = '(' FuncArg* ')'
FuncArg = binding:Pat ':' ty:Type ','?

Type = 'ident'

Block = '{' (Stmt ';'*)* '}'
Stmt =
    ExprStmt
    | VarDecl
    | IfStmt

ExprStmt = Expr ';'
VarDecl = 'var' binding:Pat '=' value:Expr ';'

IfStmt = IfBlock* ElseBlock?
IfBlock = leading_else:'else' 'if' cond:Expr Block
ElseBlock = 'else' Block

Pat = VarRef | TuplePat
TuplePat = '(' (Pat ','?)* ')'

Expr =
    Literal
    | VarRef
    | Assign
    | ParenExpr
    | BinExpr
    | IfStmt
    | RetExpr
    | UnaryExpr
    | Block

VarRef = 'ident'

Assign = binding:Pat '=' value:Expr

ParenExpr = '(' inner:Expr ')'

// TODO: Floats
Literal = Bool | Number | String
Bool = True | False
Number = 'number'
String = 'string'

RetExpr = 'return' expr:Expr

UnaryExpr = op:UnaryOp expr:Expr
UnaryOp = Bang | Minus

BinExpr = lhs:Expr op:BinOp rhs:Expr
BinOp =
    Plus
    | Minus
    | Star
    | Slash 
    | Percent
    | RightRocket
    | Pipe
    | Caret
    | Ampersand
    | Shl
    | Shr
    | And
    | Or
    | EqEq
    | Neq
    | RAngle
    | RAngleEq
    | LAngle
    | LAngleEq

Or = 'or'
And = 'and'
True = 'true'
False = 'false'
Input = 'input'
Output = 'output'
Extern = 'extern'

Eq = '='
Bang = '!'
Pipe = '|'
Plus = '+'
Star = '*'
Neq = '!='
Shl = '<<'
Shr = '>>'
Caret = '^'
Comma = ','
Colon = ':'
Minus = '-'
Slash = '/'
EqEq = '=='
LAngle = '<'
RAngle = '>'
LBrack = '['
RBrack = ']'
LCurly = '{'
RCurly = '}'
LParen = '('
RParen = ')'
Percent = '%'
Ampersand = '&'
Semicolon = ';'
LAngleEq = '<='
RAngleEq = '>='
RightRocket = '=>'
